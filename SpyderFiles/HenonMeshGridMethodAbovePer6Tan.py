#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Nov 11 13:21:04 2021

@author: patrykkwoczak
"""

import numpy as np
import matplotlib.pyplot as plt
import imageio
import os

import time

start_time = time.time()


def hMap(a,b,x,y):
    return 1 - a*x**2 + b*y
    


def backwards_hMap(a,b,x,y):
    return -(1/b)*(1 - a*y**2 - x)

def hMap_n(a,b,x,y,n):
    x_i = x
    y_i = y
    
    for i in range(n):
        old_x = x_i
        old_y = y_i
        
        new_x = hMap(a,b,old_x,old_y)
        new_y = old_x
        
        x_i = new_x
        y_i = new_y
        
        if not(np.isfinite(x_i)):
            break     
        if np.abs(x_i) > 100 or np.abs(y_i) > 100 :
            break
#        if np.abs(x_i - old_y) < 0.000001: #period 2 point
#            break
        
    x_n, y_n = x_i,y_i
    return [x_n, y_n]

dens_tan=1051
ba_list = np.loadtxt("new_per6Tan_ba_bac.txt").reshape(dens_tan, 2)
b_listB,a_listB = np.zeros(dens_tan),np.zeros(dens_tan)
for i in range(dens_tan):
    b_listB[i] = ba_list[i][0]
    a_listB[i] = ba_list[i][1]


# insert a,b,x,y of 2nd tangency line
dens_tan=1753
ba_list = np.loadtxt("new_per6Tan_ba_for.txt").reshape(dens_tan, 2)
b_listF,a_listF = np.zeros(dens_tan),np.zeros(dens_tan)
for i in range(dens_tan):
    b_listF[i] = ba_list[i][0]
    a_listF[i] = ba_list[i][1]


b_list_per6 = np.concatenate([np.flip(b_listB),b_listF])
a_list_per6 = np.concatenate([np.flip(a_listB),a_listF])

b_extra = np.flip(b_list_per6)
a_extra = np.flip(a_list_per6)

#make b,a vals walk on sink 6 curve directly
b_vals = [-0.30289999999999273, -0.30289387755101316, -0.30288775510203353, -0.30288163265305396, -0.3028755102040744, -0.30286938775509475, -0.3028632653061152, -0.3028571428571356, -0.302851020408156, -0.3028448979591764, -0.30283877551019683, -0.3028326530612172, -0.30282653061223763, -0.302820408163258, -0.30281428571427843, -0.30280816326529886, -0.30280204081631923, -0.30279591836733966, -0.3027897959183601, -0.30278367346938045, -0.3027775510204009, -0.3027714285714213, -0.3027653061224417, -0.3027591836734621, -0.30275306122448253, -0.3027469387755029, -0.30274081632652333, -0.30273469387754376, -0.30272857142856413, -0.30272244897958456, -0.302716326530605, -0.30271020408162536, -0.3027040816326458, -0.3026979591836662, -0.3026918367346866, -0.302685714285707, -0.30267959183672744, -0.3026734693877478, -0.30266734693876823, -0.3026612244897886, -0.30265510204080903, -0.30264897959182946, -0.30264285714284983, -0.30263673469387026, -0.3026306122448907, -0.30262448979591106, -0.3026183673469315, -0.3026122448979519, -0.3026061224489723, -0.3025999999999927]
a_vals = [1.3026819904544373, 1.3026963043723396, 1.3027106182763108, 1.3027249314737568, 1.3027392460417297, 1.3027535599040159, 1.3027678737497321, 1.3027821875856025, 1.3027965008094973, 1.3028108152113418, 1.3028251290031292, 1.3028394420514695, 1.3028537565447373, 1.3028680702944984, 1.3028823831022873, 1.3028966968444298, 1.3029110114596913, 1.3029253251533879, 1.3029396388310757, 1.302953952498211, 1.3029682661504256, 1.302982579788083, 1.3029968934117246, 1.3030112056195777, 1.3030255206169463, 1.3030398341985674, 1.3030541461336989, 1.3030684598673121, 1.3030827748592546, 1.3030970883822484, 1.3031114005559699, 1.303125715396644, 1.303140027674053, 1.3031543423468748, 1.3031686558023976, 1.303182969242521, 1.3031972818936977, 1.3032115960831694, 1.3032259094842575, 1.3032402228697226, 1.3032545362411283, 1.3032688491426292, 1.30328316271344, 1.3032974762713618, 1.3033117895103856, 1.3033261028881316, 1.3033404161756472, 1.3033547294502068, 1.3033690427082933, 1.30338335595347]

#b_vals, a_vals =b_list_per6, a_list_per6 #make b,a folllow tangency from period 6
b_vals = np.linspace(-0.084097,-0.084097, 30)
a_vals = np.linspace(1.74556, 1.749,30)

#walking along period 7 curve within period 2 range
b_vals = [-0.1817154959406989, -0.1827156136016002, -0.18371573126250146, -0.18471584892340276, -0.18571596658430406, -0.1867160842452053, -0.1877162019061066, -0.1887163195670079, -0.18971643722790915, -0.19071655488881045, -0.19171667254971175, -0.192716790210613, -0.1937169078715143, -0.1947170255324156, -0.19571714319331684, -0.19671726085421815, -0.19771737851511945, -0.1987174961760207, -0.199717613836922, -0.2007177314978233, -0.20171784915872454, -0.20271796681962584, -0.20371808448052714, -0.20471820214142838, -0.20571831980232969, -0.206718437463231, -0.20771855512413223, -0.20871867278503353, -0.20971879044593483, -0.21071890810683608, -0.21171902576773738, -0.21271914342863868, -0.21371926108953998, -0.21471937875044123, -0.21571949641134253, -0.21671961407224383, -0.21771973173314507, -0.21871984939404637, -0.21971996705494767, -0.22072008471584892, -0.22172020237675022, -0.22272032003765152, -0.22372043769855277, -0.22472055535945407, -0.22572067302035537, -0.2267207906812566, -0.2277209083421579, -0.2287210260030592, -0.22972114366396046, -0.23072126132486176, -0.23172137898576306, -0.2327214966466643, -0.2337216143075656, -0.2347217319684669, -0.23572184962936815, -0.23672196729026945, -0.23772208495117075, -0.238722202612072, -0.2397223202729733, -0.2407224379338746, -0.24172255559477585, -0.24272267325567715, -0.24372279091657845, -0.2447229085774797, -0.245723026238381, -0.2467231438992823, -0.24772326156018354, -0.24872337922108484, -0.24972349688198614, -0.2507236145428874, -0.2517237322037887, -0.25272384986469, -0.25372396752559123, -0.25472408518649253, -0.25572420284739383, -0.2567243205082951, -0.2577244381691964, -0.2587245558300977, -0.2597246734909989, -0.2607247911519002, -0.2617249088128015, -0.26272502647370277, -0.2637251441346041, -0.2647252617955054, -0.2657253794564066, -0.2667254971173079, -0.2677256147782092, -0.26872573243911047, -0.26972585010001177, -0.27072596776091307, -0.27172608542181437, -0.2727262030827156, -0.2737263207436169, -0.2747264384045182, -0.27572655606541946, -0.27672667372632076, -0.27772679138722206, -0.2787269090481233, -0.2797270267090246, -0.2807271443699259, -0.28172726203082715, -0.28272737969172845, -0.28372749735262975, -0.284727615013531, -0.2857277326744323, -0.2867278503353336, -0.28772796799623485, -0.28872808565713615, -0.28972820331803745, -0.2907283209789387, -0.29172843863984, -0.2927285563007413, -0.29372867396164254, -0.29472879162254384, -0.29572890928344514, -0.2967290269443464, -0.2977291446052477, -0.298729262266149, -0.29972937992705023, -0.30072949758795153, -0.3017296152488528]
a_vals = [1.5632906284390033, 1.561596228931555, 1.559905097659556, 1.5582172322776267, 1.5565326304240998, 1.554851289720621, 1.553173207772501, 1.5514983821683643, 1.5498268104803152, 1.5481584902635699, 1.546493419056666, 1.5448315943817754, 1.5431730137434563, 1.5415176746296397, 1.5398655745112066, 1.5382167108421638, 1.536571081059191, 1.5349286825816741, 1.5332895128121187, 1.5316535691353856, 1.530020848919048, 1.5283913495133234, 1.5267650682508274, 1.5251420024468096, 1.5235221493986668, 1.5219055063864095, 1.5202920706720389, 1.5186818395000774, 1.5170748100969913, 1.5154709796713455, 1.5138703454141338, 1.512272904497849, 1.5106786540773078, 1.5090875912889594, 1.507499713251248, 1.5059150170643363, 1.5043334998102562, 1.5027551585525087, 1.5011799903363312, 1.4996079921884224, 1.498039161117474, 1.4964734941128817, 1.4949109881460232, 1.4933516401695046, 1.491795447117132, 1.4902424059041302, 1.488692513426941, 1.487145766563103, 1.4856021621712074, 1.4840616970912555, 1.4825243681434928, 1.4809901721302459, 1.479459105833979, 1.4779311660182184, 1.47640634942732, 1.4748846527862574, 1.473366072801823, 1.4718506061597263, 1.4703382495275397, 1.4688289995530925, 1.4673228528648838, 1.4658198060718286, 1.4643198557634618, 1.4628229985091983, 1.461329230859868, 1.4598385493456847, 1.4583509504774725, 1.4568664307465289, 1.45538498662396, 1.4539066145620227, 1.4524313109913776, 1.4509590723241979, 1.4494898949527844, 1.4480237752477152, 1.4465607095617785, 1.4451006942262934, 1.4436437255529828, 1.4421897998330806, 1.4407389133381194, 1.4392910623189104, 1.4378462430063403, 1.4364044516109071, 1.4349656843226903, 1.4335299373115333, 1.432097206726647, 1.4306674886970665, 1.4292407793312651, 1.4278170747170216, 1.4263963709219003, 1.424978663992521, 1.4235639499551496, 1.4221522248152543, 1.420743484557688, 1.4193377251464663, 1.417934942525206, 1.4165351326162354, 1.4151382913213633, 1.4137444145216054, 1.4123534980768415, 1.4109655378263262, 1.4095805295881079, 1.4081984691596854, 1.406819352316942, 1.4054431748152194, 1.4040699323885504, 1.4026996207500453, 1.4013322355915818, 1.3999677725839748, 1.3986062273767372, 1.397247595598369, 1.3958918728559473, 1.3945390547355832, 1.3931891368014315, 1.3918421145975313, 1.3904979836452407, 1.3891567394453523, 1.3878183774773372, 1.386482893198913, 1.3851502820465784, 1.3838205394351422, 1.3824936607581575]

b_vals = np.linspace(-0.212476, -0.212382, 43) #box diagonal method of 3 coex
a_vals = np.linspace( 1.51264,   1.51285,  43)

#walk on period 6 inside 7-tube
b_vals = [-0.21245789473683951, -0.21244736842105005, -0.21243684210526056, -0.2124263157894711, -0.21241578947368162, -0.21240526315789215]
a_vals = [1.512683038946791, 1.5127073201690993, 1.5127316013914074, 1.5127558826137157, 1.512780163836024, 1.5128044450583324]
#b_tan,a_tan = -0.30266666666665937 , 1.3032274998595497
#
#b_vals = np.concatenate([[b_tan],b_extra])
#a_vals = np.concatenate([[a_tan],a_extra])
#
#b = b_tan
#a_i = a_tan
#walk on period 6 inside 7-tube w/ more definition
b_vals = [-0.2124591836734668, -0.21245510204081375, -0.2124510204081607, -0.2124469387755076, -0.21244285714285455, -0.2124387755102015, -0.21243469387754843, -0.21243061224489537, -0.21242653061224231, -0.21242244897958926, -0.2124183673469362, -0.2124142857142831, -0.21241020408163006, -0.212406122448977, -0.21240204081632394]
a_vals= [1.512680065735896, 1.51268948090373, 1.5126988960715637, 1.5127083112393975, 1.5127177264072313, 1.5127271415750652, 1.512736556742899, 1.5127459719107328, 1.5127553870785666, 1.5127648022464004, 1.5127742174142342, 1.512783632582068, 1.5127930477499019, 1.5128024629177357, 1.5128118780855695]

#walk along 5 sink inside 11 tube, inside region of stable man. change
b_j = np.linspace(-0.433847,-0.43306,10)
a_j = np.linspace(2.25659,2.25518,10 )

#go vertically across 11 tube inside 5 \\(/)\\
#b_vals = np.linspace(-0.430083, -0.430076,1)
#a_vals = np.linspace(2.24985, 2.249865,1)

dens = 300000

x_mid,y_mid =  0,0#0.5,0.5#1.3167979475542877 , -0.0110030936308696
delta = 1.5

#x_vals = np.linspace(x_mid-delta,x_mid+delta,dens)
#y_vals = np.linspace(y_mid-delta,y_mid+delta,dens)



#X_vals,Y_vals = np.meshgrid(x_vals, y_vals)
#X_Con, Y_Con = np.meshgrid(x_vals, y_vals) 

x_conv,y_conv = np.zeros(dens),np.zeros(dens)
x_conv_outer, y_conv_outer = np.zeros(len(b_vals)*dens),np.zeros(len(b_vals)*dens)
counter = 0
counter_out = 0
filenames = []

#a_vals = np.linspace(a_tan,1.3033,20)
k = 0
iters =5000 #num of iterations of henon map
x_mid,y_mid = 1,0
delta = 0.25

# =============================================================================
# x_vals1 = np.linspace(0.8,0.85,dens)
# y_vals1 = np.linspace(-0.02,-0.02,dens)
# x_vals2 = np.linspace(1.125,1.2125,dens)
# y_vals2 = np.linspace(-0.02,-0.02,dens)
# x_vals = np.concatenate([x_vals1,x_vals2])
# y_vals = np.concatenate([y_vals1,y_vals2])
# =============================================================================

#corr to 11,5,8.
x_vals = np.linspace(0.267185,0.417076, dens)
y_vals = np.linspace(0.73996,0.2806,  dens)

for k in range(0,len(b_vals),1): #len(b_vals)
    counter = 0
    print('------------')
    print(k)
    print((time.time() - start_time)/60)

    for i in range(dens):
        if i%10000 == 0:
            print(100 * i / dens)
            if (100 * i / dens)%20 == 0:
                print((time.time() - start_time)/60)
            

        
        my_x,my_y = x_vals[i],y_vals[i]
        
        xy = hMap_n(a_vals[k],b_vals[k],my_x,my_y,iters)
        if not (np.isnan(xy[0]) or (np.abs(xy[0])>100) or (np.abs(xy[1]) > 100)):
            x_conv[counter] = xy[0]
            y_conv[counter] = xy[1]
            if (np.abs(xy[0]) > 1.5) or (np.abs(xy[1]) > 1.5): #if a point is out of plot
                x_conv_outer[counter_out] = xy[0]
                y_conv_outer[counter_out] = xy[1]
                counter_out+=1
            counter += 1
# =============================================================================
#     print("(( 1/4 ))")
#     print('-------------------------')
#     print((time.time() - start_time)/60)          
#     x_mid,y_mid =  0,-0.75
#     delta = 0.25           
# 
#     x_vals = np.linspace(x_mid-delta,x_mid+delta,dens)
#     y_vals = np.linspace(y_mid-delta,y_mid+delta,dens)
#     X_vals,Y_vals = np.meshgrid(x_vals, y_vals)
#     for i in range(dens):
#         for j in range(dens):
#             if i%10 == 0 and i == j:
#                 print(100 * i / dens)            
# 
#             
#             my_x,my_y = X_vals[j,i], Y_vals[j,i]
#             
#             xy = hMap_n(a_vals[k],b_vals[k],my_x,my_y,iters)
#             if not (np.isnan(xy[0]) or (np.abs(xy[0])>100) or (np.abs(xy[1]) > 100)):
#                 x_conv[counter] = xy[0]
#                 y_conv[counter] = xy[1]
#                 counter += 1            
#     print("(( 2/4 ))")
#     print('-------------------------') 
#     x_mid,y_mid =  -1,-1.25
#     delta = 0.25         
# 
#     x_vals = np.linspace(x_mid-delta,x_mid+delta,dens)
#     y_vals = np.linspace(y_mid-delta,y_mid+delta,dens)
#     X_vals,Y_vals = np.meshgrid(x_vals, y_vals)
#     print((time.time() - start_time)/60)
#     for i in range(dens):
#         for j in range(dens):
#             if i%10 == 0 and i == j:
#                 print(100 * i / dens)
# 
#             
#             my_x,my_y = X_vals[j,i], Y_vals[j,i]
#             
#             xy = hMap_n(a_vals[k],b_vals[k],my_x,my_y,iters)
#             if not (np.isnan(xy[0]) or (np.abs(xy[0])>100) or (np.abs(xy[1]) > 100)):
#                 x_conv[counter] = xy[0]
#                 y_conv[counter] = xy[1]
#                 counter += 1              
#             
#         #X_Con[j,i], Y_Con[j,i] = xy[0],xy[1]
#     print("(( 3/4 ))")
#     print('-------------------------')
#     print((time.time() - start_time)/60)
#     x_mid,y_mid =  -1,1
#     delta = 0.25            
# 
#     x_vals = np.linspace(x_mid-delta,x_mid+delta,dens)
#     y_vals = np.linspace(y_mid-delta,y_mid+delta,dens)
#     X_vals,Y_vals = np.meshgrid(x_vals, y_vals)
#     for i in range(dens):
#         for j in range(dens):
#             if i%10 == 0 and i == j:
#                 print(100 * i / dens)
# 
#             
#             my_x,my_y = X_vals[j,i], Y_vals[j,i]
#             
#             xy = hMap_n(a_vals[k],b_vals[k],my_x,my_y,iters)
#             if not (np.isnan(xy[0]) or (np.abs(xy[0])>100) or (np.abs(xy[1]) > 100)):
#                 
#                 x_conv[counter] = xy[0]
#                 y_conv[counter] = xy[1]
#                 counter += 1              
# 
# =============================================================================

    fig = plt.figure(figsize = (8,8))
    plt.title(str(b_vals[k])+', '+str(a_vals[k])+', dens: '+str(dens))
    
    ax = fig.add_subplot(1, 1, 1)  
    plt.xlim(-1.5,1.5)
    plt.ylim(-1.5,1.5)
    ax.plot(x_conv[0:counter-1], y_conv[0:counter-1],'.',color='black')
    
    filename = f'{k}.png'
    #k+=1
    filenames.append(filename)
    plt.savefig(filename)
    plt.close()
    
#x_per,y_per = 1.3167979475542877 , -0.0110030936308696
#for i in range(0,100):
#    xy = hMap_n(a_i,b,x_per,y_per,i)
#    ax.plot([xy[0]],[xy[1]],'x',color='red')
with imageio.get_writer('HenonWalkingOn3_11_5_8_coex_perpline_2.gif', mode='I') as writer:
    for filename in filenames:
        image = imageio.imread(filename)
        writer.append_data(image)
# Remove files
for filename in set(filenames):
    os.remove(filename)    

print((time.time() - start_time)/60)


        
        
        
        
        
        